package at.doml.restinfo.type;

import java.lang.reflect.Type;

/**
 * Interface which defines an object which can visit nodes in type tree generated by <code>TypeTreeGenerator</code>.
 * In the <a href="https://en.wikipedia.org/wiki/Visitor_pattern">visitor design pattern</a>, this interface represents
 * the <code>Visitor</code> and <code>VisitableType</code> interface represents the <code>Element</code>.<br/>
 * <br/>
 * List of type nodes which this visitor can visit is as follows:<ul>
 * <li>simple types - see {@link SimpleType}</li>
 * <li>enum types - any Java <code>enum</code></li>
 * <li>array types - types which represent any Java array. Multi-dimensional arrays will be represented as nested
 * one-dimensional arrays</li>
 * <li>collection types - any class which implements <code>java.util.Collection</code> interface</li>
 * <li>map - any class which implements <code>java.util.Map</code> interface</li>
 * <li>custom - any type registered as custom type before type tree generation. See
 * {@link TypeTreeGenerator#registerCustomType(Type)}</li>
 * <li>complex - any type which is composed of other types. All classes which are not registered as custom types and can
 * be obtained by the class loader will be put into this category</li>
 * <li>unknown - any type not covered by the above definition (i.e. types which cannot be loaded by the class loader and
 * are not registered as custom types)</li>
 * </ul>
 *
 * @author Domagoj Lateƒçki
 * @version 1.0.0
 * @see VisitableType
 * @see TypeTreeGenerator
 */
public interface TypeVisitor {

    /**
     * Called when visiting a simple type. For more information about simple types see {@link SimpleType}.
     *
     * @param type reference to the constant of <code>SimpleType</code> enumeration which corresponds to the visited
     *             simple type
     */
    void visitSimple(SimpleType type);

    /**
     * Called when visiting an enumeration.
     *
     * @param enumConstants constants of the visited enumeration.
     */
    void visitEnum(Enum<?>[] enumConstants);

    /**
     * Called when visiting an array, before visiting array child element type.
     */
    void visitBeforeArrayElementType();

    /**
     * Defines whether array child element type should be visited by this visitor.
     *
     * @return <code>true</code> if child element type should be visited by this visitor, <code>false</code> otherwise
     */
    boolean shouldVisitArrayElementType();

    /**
     * Called when visiting an array, after visiting array child element type.
     */
    void visitAfterArrayElementType();

    /**
     * Called when visiting a collection, before visiting collection child element type.
     */
    void visitBeforeCollectionElementType();

    /**
     * Defines whether collection child element type should be visited by this visitor.
     *
     * @return <code>true</code> if child element type should be visited by this visitor, <code>false</code> otherwise
     */
    boolean shouldVisitCollectionElementType();

    /**
     * Called when visiting a collection, after visiting collection child element type.
     */
    void visitAfterCollectionElementType();

    /**
     * Called when visiting a map, before visiting map key element type.
     */
    void visitBeforeMapKeyType();

    /**
     * Defines whether map key element type should be visited by this visitor.
     *
     * @return <code>true</code> if map key element type should be visited by this visitor, <code>false</code> otherwise
     */
    boolean shouldVisitMapKeyType();

    /**
     * Called when visiting a map, after visiting map key element type.
     */
    void visitAfterMapKeyType();

    /**
     * Called when visiting a map, before visiting map value element type.
     */
    void visitBeforeMapValueType();

    /**
     * Defines whether map value element type should be visited by this visitor.
     *
     * @return <code>true</code> if map value element type should be visited by this visitor, <code>false</code>
     * otherwise
     */
    boolean shouldVisitMapValueType();

    /**
     * Called when visiting a map, after visiting map value type.
     */
    void visitAfterMapValueType();

    /**
     * Called when visiting a complex type, before visiting any field of the complex type.
     */
    void visitBeforeAllComplexFields();

    /**
     * Defines whether any field elements of complex types should be visited.
     *
     * @return <code>true</code> if any field elements of complex types should be visited by this visitor,
     * <code>false</code> otherwise
     */
    boolean shouldVisitComplexFields();

    /**
     * Called when visiting a complex type, before visiting specific field of the complex type.
     *
     * @param fieldName name of the visited field
     */
    void visitBeforeComplexField(String fieldName);

    /**
     * Defines whether specific field element of complex types should be visited.
     *
     * @param fieldName name of the field for which to determine if it should be visited by this visitor
     * @return <code>true</code> if specific field element of complex types should be visited by this visitor,
     * <code>false</code> otherwise
     */
    boolean shouldVisitComplexFieldType(String fieldName);

    /**
     * Called when visiting a complex type, after visiting specific field of the complex type.
     *
     * @param fieldName name of the visited field
     */
    void visitAfterComplexField(String fieldName);

    /**
     * Called when visiting a complex type, after visiting all fields of the complex type.
     */
    void visitAfterAllComplexFields();

    /**
     * Called when visiting a custom type. Custom types are registered by calling
     * {@link TypeTreeGenerator#registerCustomType(Type)} method before generating the type tree.
     *
     * @param customTypeInformation additional information about the custom type.
     */
    void visitCustom(TypeInformation customTypeInformation);

    /**
     * Called when visiting an unknown type.
     *
     * @param unknownTypeInformation additional information about the unknown type.
     */
    void visitUnknown(TypeInformation unknownTypeInformation);
}
